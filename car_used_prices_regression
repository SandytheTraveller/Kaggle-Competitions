{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-02T09:55:50.147299Z","iopub.execute_input":"2024-09-02T09:55:50.148455Z","iopub.status.idle":"2024-09-02T09:55:50.617148Z","shell.execute_reply.started":"2024-09-02T09:55:50.148385Z","shell.execute_reply":"2024-09-02T09:55:50.615869Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Regression of Used Car Prices\n\nData:\n\n* price : target variable you want to predict, which is the sale price of the used car.\n\n* brand : The manufacturer of the car. ex) BMW, Audi, Chevrolet, etc.\n\n* model : The model name of the car. ex) BMW 328i, Chevrolet Camaro 1LT, etc.\n\n* model_year : The year the car was manufactured and rolled out from the factory. Indicates the actual production year of the vehicle.\n\n* milage : The mileage of the car, indicating how far the car has been driven.\n\n* fuel_type : The type of fuel the car uses. ex) Gasoline, Diesel, Electric, etc.\n\n* engine : THe specifications of the carâ€™s engine. ex) displacement, number of cylinders, and horsepower.\n\n* transmission : The type of transmission in the car. ex) Automatic (A/T), Manual (M/T), etc.\n\n* ext_col : The exterior color of the car.\n\n* int_col : The interior color of the car.\n\n* accident : Indicates whether the car has been involved in any accidents or has sustained damage.\n\n* clean_title : Indicates the status of the car's title. 'Yes' / 'No' means the car has / doesn't have a clean title.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom xgboost import XGBRFRegressor","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:50.619648Z","iopub.execute_input":"2024-09-02T09:55:50.620640Z","iopub.status.idle":"2024-09-02T09:55:53.124148Z","shell.execute_reply.started":"2024-09-02T09:55:50.620582Z","shell.execute_reply":"2024-09-02T09:55:53.122914Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv', index_col='id')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv', index_col='id')\ntrain_df.tail()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:53.126053Z","iopub.execute_input":"2024-09-02T09:55:53.127158Z","iopub.status.idle":"2024-09-02T09:55:55.210891Z","shell.execute_reply.started":"2024-09-02T09:55:53.127079Z","shell.execute_reply":"2024-09-02T09:55:55.209690Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                brand                     model  model_year  milage fuel_type  \\\nid                                                                              \n188528       Cadillac     Escalade ESV Platinum        2017   49000  Gasoline   \n188529  Mercedes-Benz  AMG C 43 AMG C 43 4MATIC        2018   28600  Gasoline   \n188530  Mercedes-Benz    AMG GLC 63 Base 4MATIC        2021   13650  Gasoline   \n188531           Audi          S5 3.0T Prestige        2022   13895  Gasoline   \n188532        Porsche                Macan Base        2016   59500  Gasoline   \n\n                                               engine  \\\nid                                                      \n188528   420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel   \n188529  385.0HP 3.0L V6 Cylinder Engine Gasoline Fuel   \n188530   469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel   \n188531                                           3.0L   \n188532   252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                          transmission                    ext_col int_col  \\\nid                                                                          \n188528  Transmission w/Dual Shift Mode                      White   Beige   \n188529                     8-Speed A/T                      White   Black   \n188530                     7-Speed A/T                      White   Black   \n188531               1-Speed Automatic  Daytona Gray Pearl Effect   Black   \n188532  Transmission w/Dual Shift Mode                      White   Black   \n\n                                      accident clean_title  price  \nid                                                                 \n188528                           None reported         Yes  27500  \n188529  At least 1 accident or damage reported         Yes  30000  \n188530                           None reported         Yes  86900  \n188531                           None reported         NaN  84900  \n188532                           None reported         Yes  28995  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>188528</th>\n      <td>Cadillac</td>\n      <td>Escalade ESV Platinum</td>\n      <td>2017</td>\n      <td>49000</td>\n      <td>Gasoline</td>\n      <td>420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>White</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>27500</td>\n    </tr>\n    <tr>\n      <th>188529</th>\n      <td>Mercedes-Benz</td>\n      <td>AMG C 43 AMG C 43 4MATIC</td>\n      <td>2018</td>\n      <td>28600</td>\n      <td>Gasoline</td>\n      <td>385.0HP 3.0L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>8-Speed A/T</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>30000</td>\n    </tr>\n    <tr>\n      <th>188530</th>\n      <td>Mercedes-Benz</td>\n      <td>AMG GLC 63 Base 4MATIC</td>\n      <td>2021</td>\n      <td>13650</td>\n      <td>Gasoline</td>\n      <td>469.0HP 4.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>86900</td>\n    </tr>\n    <tr>\n      <th>188531</th>\n      <td>Audi</td>\n      <td>S5 3.0T Prestige</td>\n      <td>2022</td>\n      <td>13895</td>\n      <td>Gasoline</td>\n      <td>3.0L</td>\n      <td>1-Speed Automatic</td>\n      <td>Daytona Gray Pearl Effect</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>NaN</td>\n      <td>84900</td>\n    </tr>\n    <tr>\n      <th>188532</th>\n      <td>Porsche</td>\n      <td>Macan Base</td>\n      <td>2016</td>\n      <td>59500</td>\n      <td>Gasoline</td>\n      <td>252.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>28995</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.214211Z","iopub.execute_input":"2024-09-02T09:55:55.215308Z","iopub.status.idle":"2024-09-02T09:55:55.414279Z","shell.execute_reply.started":"2024-09-02T09:55:55.215220Z","shell.execute_reply":"2024-09-02T09:55:55.412900Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 12 columns):\n #   Column        Non-Null Count   Dtype \n---  ------        --------------   ----- \n 0   brand         188533 non-null  object\n 1   model         188533 non-null  object\n 2   model_year    188533 non-null  int64 \n 3   milage        188533 non-null  int64 \n 4   fuel_type     183450 non-null  object\n 5   engine        188533 non-null  object\n 6   transmission  188533 non-null  object\n 7   ext_col       188533 non-null  object\n 8   int_col       188533 non-null  object\n 9   accident      186081 non-null  object\n 10  clean_title   167114 non-null  object\n 11  price         188533 non-null  int64 \ndtypes: int64(3), object(9)\nmemory usage: 18.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df['brand'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.415726Z","iopub.execute_input":"2024-09-02T09:55:55.416269Z","iopub.status.idle":"2024-09-02T09:55:55.461176Z","shell.execute_reply.started":"2024-09-02T09:55:55.416144Z","shell.execute_reply":"2024-09-02T09:55:55.459920Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"brand\nFord             23088\nMercedes-Benz    19172\nBMW              17028\nChevrolet        16335\nAudi             10887\nPorsche          10612\nLand              9525\nToyota            8850\nLexus             8643\nJeep              6474\nCadillac          4674\nRAM               4249\nNissan            3930\nTesla             3738\nINFINITI          3276\nGMC               3215\nDodge             3133\nMazda             2719\nKia               2497\nLincoln           2423\nSubaru            2381\nAcura             2282\nHonda             2101\nHyundai           2045\nVolkswagen        1765\nJaguar            1319\nBentley           1155\nMINI              1064\nGenesis            969\nBuick              940\nMaserati           939\nLamborghini        809\nChrysler           727\nVolvo              723\nAlfa               682\nRivian             590\nRolls-Royce        561\nMitsubishi         551\nPontiac            538\nHummer             520\nFerrari            359\nMcLaren            243\nAston              238\nSaturn             148\nScion              120\nLucid               69\nMercury             57\nLotus               52\nFIAT                44\nSaab                22\nKarma               17\nSuzuki               8\nPlymouth             7\nBugatti              7\nPolestar             7\nsmart                3\nMaybach              3\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.462877Z","iopub.execute_input":"2024-09-02T09:55:55.463486Z","iopub.status.idle":"2024-09-02T09:55:55.472900Z","shell.execute_reply.started":"2024-09-02T09:55:55.463431Z","shell.execute_reply":"2024-09-02T09:55:55.471720Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(188533, 12)"},"metadata":{}}]},{"cell_type":"markdown","source":"## Feature Engineering","metadata":{}},{"cell_type":"code","source":"train_df.isnull().sum() / train_df.shape[0] * 100","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.474450Z","iopub.execute_input":"2024-09-02T09:55:55.474868Z","iopub.status.idle":"2024-09-02T09:55:55.668208Z","shell.execute_reply.started":"2024-09-02T09:55:55.474828Z","shell.execute_reply":"2024-09-02T09:55:55.666720Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"brand            0.000000\nmodel            0.000000\nmodel_year       0.000000\nmilage           0.000000\nfuel_type        2.696080\nengine           0.000000\ntransmission     0.000000\next_col          0.000000\nint_col          0.000000\naccident         1.300568\nclean_title     11.360876\nprice            0.000000\ndtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"Columns 'fuel_type', 'accident' and 'clean_title' have missing values.","metadata":{}},{"cell_type":"code","source":"train_df['clean_title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.669591Z","iopub.execute_input":"2024-09-02T09:55:55.670075Z","iopub.status.idle":"2024-09-02T09:55:55.709397Z","shell.execute_reply.started":"2024-09-02T09:55:55.670026Z","shell.execute_reply":"2024-09-02T09:55:55.707899Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"clean_title\nYes    167114\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['clean_title'] = train_df['clean_title'].fillna('No')\ntest_df['clean_title'] = test_df['clean_title'].fillna('No')","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.711033Z","iopub.execute_input":"2024-09-02T09:55:55.711492Z","iopub.status.idle":"2024-09-02T09:55:55.762580Z","shell.execute_reply.started":"2024-09-02T09:55:55.711449Z","shell.execute_reply":"2024-09-02T09:55:55.761381Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_df['clean_title'] = train_df['clean_title'].map({'Yes': 1, 'No': 0})\ntest_df['clean_title'] = test_df['clean_title'].map({'Yes': 1, 'No': 0})","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.764189Z","iopub.execute_input":"2024-09-02T09:55:55.764616Z","iopub.status.idle":"2024-09-02T09:55:55.809811Z","shell.execute_reply.started":"2024-09-02T09:55:55.764566Z","shell.execute_reply":"2024-09-02T09:55:55.808654Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train_df['accident'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.813956Z","iopub.execute_input":"2024-09-02T09:55:55.814382Z","iopub.status.idle":"2024-09-02T09:55:55.855480Z","shell.execute_reply.started":"2024-09-02T09:55:55.814341Z","shell.execute_reply":"2024-09-02T09:55:55.854344Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"accident\nNone reported                             144514\nAt least 1 accident or damage reported     41567\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['accident'] = train_df['accident'].fillna('missing')\ntest_df['accident'] = test_df['accident'].fillna('missing')","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.856865Z","iopub.execute_input":"2024-09-02T09:55:55.857304Z","iopub.status.idle":"2024-09-02T09:55:55.912160Z","shell.execute_reply.started":"2024-09-02T09:55:55.857201Z","shell.execute_reply":"2024-09-02T09:55:55.910994Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"train_df['fuel_type'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.913561Z","iopub.execute_input":"2024-09-02T09:55:55.913938Z","iopub.status.idle":"2024-09-02T09:55:55.955149Z","shell.execute_reply.started":"2024-09-02T09:55:55.913899Z","shell.execute_reply":"2024-09-02T09:55:55.953876Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"fuel_type\nGasoline          165940\nHybrid              6832\nE85 Flex Fuel       5406\nDiesel              3955\nâ€“                    781\nPlug-In Hybrid       521\nnot supported         15\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"def cleaning_data(df):\n\n    fuel_type_imputer = SimpleImputer(strategy='most_frequent')\n    df['fuel_type'] = fuel_type_imputer.fit_transform(df[['fuel_type']]).ravel() \n    \n    missing_label_imputer = SimpleImputer(strategy='constant', fill_value='missing')\n    df[['accident', 'clean_title']] = missing_label_imputer.fit_transform(df[['accident', 'clean_title']])\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.956750Z","iopub.execute_input":"2024-09-02T09:55:55.957238Z","iopub.status.idle":"2024-09-02T09:55:55.966534Z","shell.execute_reply.started":"2024-09-02T09:55:55.957186Z","shell.execute_reply":"2024-09-02T09:55:55.965436Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"train_df = cleaning_data(train_df)\ntest_df = cleaning_data(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:55.967849Z","iopub.execute_input":"2024-09-02T09:55:55.968319Z","iopub.status.idle":"2024-09-02T09:55:56.200295Z","shell.execute_reply.started":"2024-09-02T09:55:55.968234Z","shell.execute_reply":"2024-09-02T09:55:56.199106Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"And now we encode all features of type 'object' into numerical features for trainign our model. We will use OrdinalEncoder (for now, normally I wouldn't use it, but it's faster that way for now, later it will be switched to OneHotEncoding, it's more appropriate at least for some features).","metadata":{}},{"cell_type":"code","source":"cat_cols = [cat for cat in test_df.columns if test_df[cat].dtype == 'object']\n\noe = OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value = np.nan)\ntrain_df[cat_cols] = oe.fit_transform(train_df[cat_cols])\ntest_df[cat_cols] = oe.fit_transform(test_df[cat_cols])\ntrain_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:56.201645Z","iopub.execute_input":"2024-09-02T09:55:56.202027Z","iopub.status.idle":"2024-09-02T09:55:57.320235Z","shell.execute_reply.started":"2024-09-02T09:55:56.201987Z","shell.execute_reply":"2024-09-02T09:55:57.317853Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 12 columns):\n #   Column        Non-Null Count   Dtype  \n---  ------        --------------   -----  \n 0   brand         188533 non-null  float64\n 1   model         188533 non-null  float64\n 2   model_year    188533 non-null  int64  \n 3   milage        188533 non-null  int64  \n 4   fuel_type     188533 non-null  float64\n 5   engine        188533 non-null  float64\n 6   transmission  188533 non-null  float64\n 7   ext_col       188533 non-null  float64\n 8   int_col       188533 non-null  float64\n 9   accident      188533 non-null  float64\n 10  clean_title   188533 non-null  float64\n 11  price         188533 non-null  int64  \ndtypes: float64(9), int64(3)\nmemory usage: 18.7 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"ohe = OneHotEncoder(categories='auto', handle_unknown='ignore', drop='first')\n\nohe_df = ohe.fit_transform(train_df[cat_cols])\ndf = pd.DataFrame(ohe_df, columns=ohe.get_feature_names_out(cat_cols))\n# Concatenate the one-hot encoded dataframe with the original dataframe\ntrain_df = pd.concat([train_df, df], axis=1)\n# Drop the original categorical columns\ntrain_df = train_df.drop(cat_cols, axis=1)\ntrain_df.info()\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:57.321729Z","iopub.execute_input":"2024-09-02T09:55:57.322110Z","iopub.status.idle":"2024-09-02T09:55:57.330393Z","shell.execute_reply.started":"2024-09-02T09:55:57.322071Z","shell.execute_reply":"2024-09-02T09:55:57.329147Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"\"ohe = OneHotEncoder(categories='auto', handle_unknown='ignore', drop='first')\\n\\nohe_df = ohe.fit_transform(train_df[cat_cols])\\ndf = pd.DataFrame(ohe_df, columns=ohe.get_feature_names_out(cat_cols))\\n# Concatenate the one-hot encoded dataframe with the original dataframe\\ntrain_df = pd.concat([train_df, df], axis=1)\\n# Drop the original categorical columns\\ntrain_df = train_df.drop(cat_cols, axis=1)\\ntrain_df.info()\""},"metadata":{}}]},{"cell_type":"code","source":"corr_matrix = train_df.corr()\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr_matrix, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:57.331905Z","iopub.execute_input":"2024-09-02T09:55:57.332374Z","iopub.status.idle":"2024-09-02T09:55:57.996565Z","shell.execute_reply.started":"2024-09-02T09:55:57.332318Z","shell.execute_reply":"2024-09-02T09:55:57.994907Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1100x900 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_df.drop(['model'], axis=1)\ntest_df.drop(['model'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:57.998297Z","iopub.execute_input":"2024-09-02T09:55:57.998823Z","iopub.status.idle":"2024-09-02T09:55:58.055880Z","shell.execute_reply.started":"2024-09-02T09:55:57.998753Z","shell.execute_reply":"2024-09-02T09:55:58.054435Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"        brand  model_year  milage  fuel_type  engine  transmission  ext_col  \\\nid                                                                            \n188533   26.0        2015   98000        2.0   326.0          16.0    302.0   \n188534   26.0        2020    9142        3.0   787.0          31.0    261.0   \n188535   14.0        2022   28121        2.0   541.0           3.0    302.0   \n188536    3.0        2016   61258        2.0   193.0          39.0    259.0   \n188537    3.0        2018   59000        2.0   365.0          38.0    127.0   \n...       ...         ...     ...        ...     ...           ...      ...   \n314218   36.0        2014   83315        2.0   732.0          23.0     29.0   \n314219    3.0        2019   29336        2.0   511.0          39.0    302.0   \n314220    3.0        2012   77634        2.0   673.0          38.0     29.0   \n314221    3.0        2012  112000        2.0   673.0          38.0     29.0   \n314222    9.0        2018   66840        2.0   718.0          38.0    261.0   \n\n        int_col  accident  clean_title  \nid                                      \n188533     10.0       1.0          1.0  \n188534     14.0       1.0          1.0  \n188535     57.0       1.0          0.0  \n188536     14.0       1.0          0.0  \n188537     14.0       1.0          1.0  \n...         ...       ...          ...  \n314218     14.0       1.0          1.0  \n314219     14.0       1.0          0.0  \n314220     14.0       1.0          1.0  \n314221     14.0       1.0          1.0  \n314222     14.0       1.0          1.0  \n\n[125690 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>brand</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>188533</th>\n      <td>26.0</td>\n      <td>2015</td>\n      <td>98000</td>\n      <td>2.0</td>\n      <td>326.0</td>\n      <td>16.0</td>\n      <td>302.0</td>\n      <td>10.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>188534</th>\n      <td>26.0</td>\n      <td>2020</td>\n      <td>9142</td>\n      <td>3.0</td>\n      <td>787.0</td>\n      <td>31.0</td>\n      <td>261.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>188535</th>\n      <td>14.0</td>\n      <td>2022</td>\n      <td>28121</td>\n      <td>2.0</td>\n      <td>541.0</td>\n      <td>3.0</td>\n      <td>302.0</td>\n      <td>57.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>188536</th>\n      <td>3.0</td>\n      <td>2016</td>\n      <td>61258</td>\n      <td>2.0</td>\n      <td>193.0</td>\n      <td>39.0</td>\n      <td>259.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>188537</th>\n      <td>3.0</td>\n      <td>2018</td>\n      <td>59000</td>\n      <td>2.0</td>\n      <td>365.0</td>\n      <td>38.0</td>\n      <td>127.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>314218</th>\n      <td>36.0</td>\n      <td>2014</td>\n      <td>83315</td>\n      <td>2.0</td>\n      <td>732.0</td>\n      <td>23.0</td>\n      <td>29.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>314219</th>\n      <td>3.0</td>\n      <td>2019</td>\n      <td>29336</td>\n      <td>2.0</td>\n      <td>511.0</td>\n      <td>39.0</td>\n      <td>302.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>314220</th>\n      <td>3.0</td>\n      <td>2012</td>\n      <td>77634</td>\n      <td>2.0</td>\n      <td>673.0</td>\n      <td>38.0</td>\n      <td>29.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>314221</th>\n      <td>3.0</td>\n      <td>2012</td>\n      <td>112000</td>\n      <td>2.0</td>\n      <td>673.0</td>\n      <td>38.0</td>\n      <td>29.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>314222</th>\n      <td>9.0</td>\n      <td>2018</td>\n      <td>66840</td>\n      <td>2.0</td>\n      <td>718.0</td>\n      <td>38.0</td>\n      <td>261.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>125690 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Model Training\nFirst, we should split the training dataset into two.\nWe also create an instance of our estimator XGB.","metadata":{}},{"cell_type":"code","source":"xgb = XGBRFRegressor(n_jobs=-1, random_state=42)\nX = train_df.drop(['price'], axis=1)\ny = train_df['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-02T09:55:58.058046Z","iopub.execute_input":"2024-09-02T09:55:58.058868Z","iopub.status.idle":"2024-09-02T09:55:58.131520Z","shell.execute_reply.started":"2024-09-02T09:55:58.058811Z","shell.execute_reply":"2024-09-02T09:55:58.130309Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"Now, it's time to search for optimal parameter of our model. One of the ways to do that is by cross-validation. RandomizedSearchCV is like a classic Grid Search, but it works faster on large datasets and allows wider exploration of hyperparameters' space.","metadata":{}},{"cell_type":"code","source":"params = {\n    'n_estimators': [500, 1000, 1500],\n    'min_child_weight': [2, 3, 4, 5],\n    'gamma':[i/10.0 for i in range(3,6)],  \n    'subsample':[i/10.0 for i in range(6,11)],\n    'colsample_bytree':[i/10.0 for i in range(6,11)], \n    'max_depth': [5, 6, 7], # the higher max_depth, the more is the risk of overfitting + computationally expensive\n    'objective': ['reg:squarederror', 'reg:tweedie'],\n    'booster': ['gbtree'],\n    'eval_metric': ['rmse'],\n    'eta': [i/10.0 for i in range(3,6)],\n}\ncv_random = RandomizedSearchCV(xgb, \n                              param_distributions=params,\n                              n_iter=200,\n                               n_jobs=-1,\n                              cv=5,\n                              scoring='neg_mean_squared_error')\n\ncv_random.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-02T15:04:57.887812Z","iopub.execute_input":"2024-09-02T15:04:57.888246Z","iopub.status.idle":"2024-09-02T15:04:58.417353Z","shell.execute_reply.started":"2024-09-02T15:04:57.888194Z","shell.execute_reply":"2024-09-02T15:04:58.415174Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 13\u001b[0m\n\u001b[1;32m      1\u001b[0m params \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      2\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_estimators\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m500\u001b[39m, \u001b[38;5;241m1000\u001b[39m, \u001b[38;5;241m1500\u001b[39m],\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmin_child_weight\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m5\u001b[39m],\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124meta\u001b[39m\u001b[38;5;124m'\u001b[39m: [i\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m10.0\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m6\u001b[39m)],\n\u001b[1;32m     12\u001b[0m }\n\u001b[0;32m---> 13\u001b[0m cv_random \u001b[38;5;241m=\u001b[39m \u001b[43mRandomizedSearchCV\u001b[49m(xgb, \n\u001b[1;32m     14\u001b[0m                               param_distributions\u001b[38;5;241m=\u001b[39mparams,\n\u001b[1;32m     15\u001b[0m                               n_iter\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m200\u001b[39m,\n\u001b[1;32m     16\u001b[0m                                n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[1;32m     17\u001b[0m                               cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m,\n\u001b[1;32m     18\u001b[0m                               scoring\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mneg_mean_squared_error\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     20\u001b[0m cv_random\u001b[38;5;241m.\u001b[39mfit(X_train, y_train)\n","\u001b[0;31mNameError\u001b[0m: name 'RandomizedSearchCV' is not defined"],"ename":"NameError","evalue":"name 'RandomizedSearchCV' is not defined","output_type":"error"}]},{"cell_type":"markdown","source":"We found the best estimator with its parameters, we use it to train our model.","metadata":{}},{"cell_type":"code","source":"final_estimator = cv_random.best_estimator_\ny_pred = final_estimator.predict(X_test)\nscore = mean_squared_error(y_test, y_pred, squared=False)\nscore","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = final_estimator.predict(test_df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sample = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv', index_col='id')\nsample['price'] = predictions\nsample.to_csv('submission.csv')\nsample.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}